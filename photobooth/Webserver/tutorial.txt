As a result of following along with the NYU class <a href="http://www.decontextualize.com/teaching/rwet">Reading and Writing Electronic Text</a> I started to get into using Python for web apps -- this, along with learning JavaScript, is something I'd been wanting to do for a while. 

I'll try to summarize what I've learned over the last week or so. What I was looking for was a simple way to get into this stuff, and as I discovered it's not so simple, for a hobbyist like myself, once you combine two or three frameworks in a project. Maybe this post will help someone else in the same situation. 

Python already was the choice for the server-side script. What I then needed was a way for the browser to communicate with the script. There are literally dozens of ways to do this, and <a href="http://wiki.python.org/moin/WebProgramming">the Python wiki has a good page on web programming</a>. I also <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=146149">found this conversation springing from a post by the BDFL</a> at Artima a good read, though it's a few years old now. 

I decided to keep it simple (though I still want to learn frameworks like Django, TurboGears, etcetera at some point in the future). I considered looking into using CGI with Python, but then I found <a href="http://web.py.org/">web.py</a>, a lightweight web framework, and liked it immediately. 

The web.py framework can run its own basic web server or interface with others such as Apache or lighttpd. It includes a simple HTML template language that basically is just HTML + Python. It works with databases or not. In short it has all you need to get things running quickly.

So I had the server language and the web framework. All that remained was the client-side. Rather than rolling all the JavaScript myself I went with the <a href="http://jquery.com/">jQuery </a>library. I had heard some good things and it looked good when I checked it out. 

OK, first let's look at the basic project structure. Note that I'm using web.py's templates, though this isn't required:

<strong>- webpy_jquery_ajax_tutorial</strong>
<strong> &nbsp;&nbsp;- static</strong>
 &nbsp;&nbsp; &nbsp;&nbsp;<em> jquery.js
&nbsp;&nbsp; &nbsp;&nbsp;tutorial.css</em>
<strong> &nbsp;&nbsp;- templates</strong>
<em>&nbsp;&nbsp;&nbsp;&nbsp;tutorial.html</em>
 &nbsp;&nbsp;<em>app.py</em>

Within the project directory we include the <strong>static </strong>and <strong>templates </strong>directories (required terms for web.py). Files such as CSS, JavaScript, images, and so on are put in <strong>static</strong>. HTML templates go in <strong>templates</strong>, and everything else can go in the main project directory. 

Our <em>app.py</em> is the web.py script that controls our app. It looks like this:

[sourcecode language="Python"]
import web

def make_text(string):
    return string

urls = ('/', 'tutorial')
render = web.template.render('templates/')

app = web.application(urls, globals())

my_form = web.form.Form(
                web.form.Textbox('', class_='textfield', id='textfield'),
                )

class tutorial:
    def GET(self):
        form = my_form()
        return render.tutorial(form, "Your definition goes here.")
        
    def POST(self):
        form = my_form()
        form.validates()
        s = form.value['textfield']
        return make_text(s)

if __name__ == '__main__':
    app.run()
[/sourcecode]

Other than the simple echo function defined for this tutorial, there are some critical parts to the code above, so let's look at it more closely. 

First of all web.py will map the URL to classes in the script. That's why we have <strong>urls = ('/', 'tutorial')</strong>, which says map the root URL address to what happens in the <strong>project </strong>class defined later. 

Second, if we're using templates we tell web.py where to find our HTML templates with <strong>render = web.template.render('templates/')</strong>. The my_form creates an HTML text entry box that we'll render later. We give it an empty string for a name simply for aesthetic reasons (otherwise you'll see it on the HTML page). 

Finally we define the <strong>tutorial </strong>class.  We create the GET and POST methods (<a href="http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods">web.py intentionally requires this</a>)to define the behaviour of our web.py app in response to browser client requests. Looking at GET:

[sourcecode language="Python"]
    def GET(self):
        form = my_form()
        return render.tutorial(form, "Your definition goes here.")
[/sourcecode]

Defining <strong>form = my_form()</strong> gives us a copy of the form instance we created earlier. The method <strong>render.tutorial()</strong> returns a rendering of the tutorial  HTML template (using the same name tutorial here in the class definition, the call, and eventually the HTML template are important here!), passing the arguments <strong>form</strong> and the text string to the template at the same time. 

Now for POST:

[sourcecode language="Python"]
    def POST(self):
        form = my_form()
        form.validates()
        s = form.value['textfield']
        return make_text(s)
[/sourcecode]

Again using a copy of the form instance, we automatically validate it (simply because I haven't learned how to validate forms yet!). We can then access the value of our <strong>textfield</strong> box with <strong>form.value['textfield']</strong>, and send it to our echo function defined earlier. 

That's all you need in the <em>app.py</em>, now to look at the HTML template (located in the templates directory):

[sourcecode language="HTML"]
$def with (form, text)

<!doctype html>

<html>

    <head>
        <title>Hello</title>
        <link rel="stylesheet" type="text/css" href="/static/tutorial.css" />
        
        <script type="text/javascript" src="/static/jquery.js"></script>
        
        <script type="text/javascript">
                                jQuery(document).ready(function() {
                                jQuery(".button").click(function() {
                                        var input_string = $$("input#textfield").val();
                                        jQuery.ajax({
                                                type: "POST",
                                                data: {textfield : input_string},
                                                success: function(data) {
                                                jQuery('#foo').html(data).hide().fadeIn(1500);
                                                },
                                                });
                                        return false;
                                        });
                                });
        
                        </script>
    </head>
    
    <body>
        <br>
        <form class="form" method="post"> 
        $:form.render()
        <input class="button" type="submit" value="send"/>    
        </form>

        <br><br>
        <span id="foo">$text</span>        
    </body>
    
</html>
[/sourcecode]

(we'll see how WP handles the syntax styling with that...)

There's a little more going on here so let's take it one step at a time. 

In a web.py template the first line of the file defines what data is passed to the template by web.py. So here we have <strong>$def with (form, text)</strong>, which as you'll recall parallels the call we made in the GET method above. So when a client requests this page, those arguments are passed along. 

The web.py templating language uses '$' symbols to denote Python expressions (and the arguments passed into the template). To use an actual '$' just escape it with '$$'. Note that it's a popular habit in jQuery to also use the dollar sign to mean the jQuery object, but we can get around that conflict simply by using 'jQuery' instead in the JavaScript. There are other ways around that but I like this method for its simplicity and how it feels the same as Python namespaces. 

The head tag of the file is nothing special, it just tells us where the CSS and .js files are located (though it's important to web.py that they're in <strong>static </strong>as explained before). The JavaScript that follows needs some more explanation though:

[sourcecode language="javascript"]
        
        <script type="text/javascript">
                                jQuery(document).ready(function() {
                                jQuery(".button").click(function() {
                                        var input_string = $$("input#textfield").val();
                                        jQuery.ajax({
                                                type: "POST",
                                                data: {textfield : input_string},
                                                success: function(data) {
                                                jQuery('#foo').html(data).hide().fadeIn(1500);
                                                },
                                                });
                                        return false;
                                        });
                                });
        
                        </script>
[/sourcecode]

It's actually pretty simple. All this does is send what's in the <strong>textfield </strong>box to the server when the <strong>button </strong>is clicked. If the action is successful (i.e. the server accepts the input data and returns it OK), jQuery replaces what's in the <strong>foo </strong>element with the data returned. This uses the ajax() function -- so the page doesn't reload (it's not really AJAX as you may realize, since there's no XML exchanged -- that's OK, I don't like XML anyway! ;) )

I'll point out some conventions that a beginner should know. Saying <strong>".button"</strong> just refers to the element with the button class (defined in our <em>app.py</em> script, look above). Saying <strong>"input#textfield"</strong> refers to the input element with the CSS id of textfield (also defined in <em>app.py</em>). 

The <strong>success </strong>function passed through <strong>ajax()</strong> is called if the action is successful; the part with <strong>hide()</strong> and then <strong>fadeIn()</strong> is just a prettier way of displaying the new text on the HTML page (otherwise, it just replaces it with no transition effect). 

Lastly, returning false prevents the page from reloading. 

Moving on to the body of the HTML page:

[sourcecode language="HTML"]
    <body>
        <br>
        <form class="form" method="post"> 
        $:form.render()
        <input class="button" type="submit" value="send"/>    
        </form>

        <br><br>
        <span id="foo">$text</span>        
    </body>
    
[/sourcecode]

All we do here is enclose a rendering of the textfield and button in form tags. Tthis isn't totally necessary, but as I discovered, without the form tags pressing return in the textfield box doesn't activate the button (i.e. you have to click on the button). Apparently you can process keyboard events with jQuery but this seemed simpler. 

An additional note about $ is that you need to use <strong>$:</strong> if the expression will contain some HTML that you don't want escaped, as we do with <strong>$:form.render</strong>. 

The <strong>foo </strong>span element is just a basic container that the jQuery function can replace with the new text. 

To recap, what this does is display (from your browser GETting the page from the server) a HTML page with a textfield and button. When you enter text in the textfield and submit it (that is, POST it), the JavaScript on the HTML page runs, and replaces the foo element with the text processed and returned by the <em>app.py</em> without reloading the page. There you have it -- basic Python and AJAX!

There are some obvious improvements to be made here. First of all there's nothing stopping the user from clicking the button multiple times and sending multiple POST requests (probably not a desirable situation). There also isn't any user session setup or form validation. In any case these things are next in my list to learn, but my experience with web.py and jQuery has been great so far. I'm looking forward to more! 

Also, the documentation for web.py and jQuery are good, so check those out for more information on their APIs. 

I'd like to thank the members of the web.py mailing list, particularly Branko Vukelic, for their feedback on an earlier draft of this post. Naturally all errors are (most definitely) my own. 

If you'd like a zipped copy of the files in this tutorial, you can find it here. Run app.py and then point your browser to http://localhost:8080 (on Windows; use the appropriate address for your setup). 





